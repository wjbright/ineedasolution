import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import FingerprintJS from '@fingerprintjs/fingerprintjs'
import { useEffect, useMemo } from "react";

const Home: NextPage = () => {
  const browserIdentity = trpc.browser.store.useMutation();

  // Initialize an agent at application startup.
const fingerPrint = useMemo(async () => {
  const fp = await FingerprintJS.load()
  const result = await fp.get()

  return result.visitorId
}, []);

useEffect(() => {
  async function identifyBrowser() {
    const signature =  await fingerPrint
    browserIdentity.mutate({signature})
  }
  identifyBrowser();

}, [fingerPrint])


  

  return (
    <>
      <Head>
        <title>I need a solution</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        {browserIdentity.data?.returning && <span className="text-gray-700 text-center">Welcome back 👋🏽</span>}
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          I need a <span className="text-purple-300">solution</span>
        </h1>
        <span className="text-gray-700 text-center">Are you looking for a solution to a problem that has not been solved? Type it here, someone is probably interested in building it for you 😉</span>
        <span className="py-4"></span>
        <div className="w-full py-7">
          <textarea className="w-full textarea block rounded-md border-gray-300 pl-7 pr-12 focus:border-purple-700 focus:ring-purple-700 text-center" placeholder='What problem do you need a solution to?'></textarea>
        </div>
        <span className="py-3"></span>
        <p className="text-2xl text-gray-700">Is the problem similar to any of these?</p>
        <p className="text-sm text-gray-700 py-3">Problems with the most votes will likely get solutions built for faster</p>
        <span className="py-4"></span>
        <div className="flex flex-col w-full">
          <ProblemCard description="I need money"/>
        </div>
        <span className="py-6"></span>
        <button type={'button'} className="rounded-md block px-6 py-4 text-sm text-white bg-purple-700">No, submit my own</button>
      </main>
    </>
  );
};

export default Home;

type ProblemCardProps = {
  description: string;
};

const ProblemCard = ({
  description,
}: ProblemCardProps) => {
  return (
    <section className="flex flex-row justify-between rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <p className="text-sm text-gray-600 pb-3 w-[90%] ">{description}</p>
      
      <button>Upvote 🔼</button>
    </section>
  );
};
